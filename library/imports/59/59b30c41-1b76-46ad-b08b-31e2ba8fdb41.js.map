{"version":3,"sources":["../../../../../assets/Script/Util/assets/Script/Util/WordUtil.ts"],"names":[],"mappings":";;;;AAAA;;GAEG;;AAEF;IAAA;IAwJA,CAAC;IA1IgB,qBAAY,GAA1B,UAA2B,OAAkB,EAAC,UAAqB;QAC/D,sBAAsB;QACtB,OAAO,CAAC,IAAI,CAAC,UAAC,OAAO,EAAE,OAAO;YAC1B,EAAE,CAAA,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,CAAA,CAAC;gBACjC,MAAM,CAAC,CAAC,CAAC;YACb,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QACH,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;QAC5B,IAAI,YAAY,GAAG,IAAI,KAAK,EAAE,CAAC;QAC/B,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,GAAG,CAAC,CAAa,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;YAAnB,IAAI,IAAI,gBAAA;YACT,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAC,SAAS,EAAC,YAAY,EAAC,OAAO,EAAC,IAAI,EAAC,KAAK,CAAC,CAAC;YAC/E,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YACzB,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAC3B,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACjC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;SAC1B;QACD,GAAG,CAAC,CAAa,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU;YAAtB,IAAI,IAAI,mBAAA;YACT,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAC,SAAS,EAAC,YAAY,EAAC,OAAO,EAAC,IAAI,EAAC,IAAI,CAAC,CAAC;YAC9E,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YACzB,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAC3B,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACjC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;SAC1B;QACD,GAAG,CAAA,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAC,CAAC;YACpC,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YACpC,GAAG,CAAA,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAC,CAAC;gBACpC,IAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA,CAAC;oBACf,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;oBACzC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;gBACvD,CAAC;YACL,CAAC;QACL,CAAC;QACD,MAAM,CAAC,EAAC,QAAQ,UAAA,EAAC,SAAS,WAAA,EAAC,YAAY,cAAA,EAAC,OAAO,SAAA,EAAC,CAAC;IACrD,CAAC;IAEc,mBAAU,GAAzB,UAA0B,QAAQ,EAAC,SAAS,EAAC,YAAY,EAAC,OAAO,EAAC,IAAW,EAAC,KAAa;QACvF,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,GAAE,CAAC;YACC,KAAK,EAAE,CAAC;YACR,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YAC/B,IAAI,QAAQ,GAAG,KAAK,CAAC,CAAA,6DAA6D;YAClF,IAAI,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAA,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAA,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3E,IAAI,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3E,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;YAClB,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;YAClB,QAAQ,GAAG,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC;YACjF,QAAQ,GAAG,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC;YACjF,IAAI,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAC,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAC,IAAI,EAAC,QAAQ,CAAC,CAAC;YACvF,EAAE,CAAC,CAAC,KAAK,IAAI,YAAY,IAAI,CAAC,CAAC,CAAA,CAAC;YAChC,CAAC;YAAA,IAAI,CAAC,EAAE,CAAA,CAAC,CAAC,KAAK,IAAI,YAAY,IAAI,CAAC,CAAC,CAAA,CAAC;YACtC,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,QAAQ,CAAC;YACb,CAAC;YACD,IAAI,GAAG,GAAG,QAAQ,CAAC;YACnB,IAAI,GAAG,GAAG,QAAQ,CAAC;YACnB,IAAI,eAAe,GAAG,CAAC,CAAC;YACxB,IAAI,eAAe,GAAG,CAAC,CAAC;YACxB,IAAI,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC;gBACpB,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC;YACD,GAAG,CAAC,CAAU,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;gBAAb,IAAI,CAAC,aAAA;gBACN,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;gBACpC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA,CAAC;oBACjD,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC3B,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACF,eAAe,GAAG,GAAG,CAAC;oBACtB,eAAe,GAAG,GAAG,CAAC;oBACtB,OAAO,CAAC,IAAI,CAAC,GAAG,EAAC,GAAG,EAAE,eAAe,EAAE,GAAG,EAAG,eAAe,EAAC,MAAM,EAAG,CAAC,EAAC,CAAC;gBAC7E,CAAC;gBACD,GAAG,IAAI,MAAM,CAAC;gBACd,GAAG,IAAI,MAAM,CAAC;aACjB;YACD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAA,CAAC;gBACP,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzB,CAAC;YACD,KAAK,CAAC;QACV,CAAC,QAAM,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;QAClC,MAAM,CAAC,EAAC,QAAQ,UAAA,EAAC,SAAS,WAAA,EAAC,YAAY,cAAA,EAAC,OAAO,SAAA,EAAC,CAAC;IACrD,CAAC;IAEc,wBAAe,GAA9B,UAA+B,QAAQ,EAAC,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAC,IAAI,EAAC,QAAQ;QACxE,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,GAAG,GAAG,QAAQ,CAAC;QACnB,IAAI,GAAG,GAAG,QAAQ,CAAC;QACnB,IAAI,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,IAAI,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC;YACpB,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;QACD,GAAG,CAAA,CAAU,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;YAAb,IAAI,CAAC,aAAA;YACL,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA,CAAC;gBACjE,YAAY,EAAE,CAAC;YACnB,CAAC;YACD,GAAG,IAAI,MAAM,CAAC;YACd,GAAG,IAAI,MAAM,CAAC;SACjB;QACD,MAAM,CAAC,YAAY,CAAC;IACxB,CAAC;IAEc,qBAAY,GAA3B;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QACxB,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAA,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;QAAA,IAAI,CAAC,EAAE,CAAA,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,CAAA,CAAC;YAChD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEa,yBAAgB,GAA9B,UAA+B,QAAQ,EAAC,QAAQ,EAAC,MAAM,EAAC,MAAM;QAC1D,IAAI,MAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,IAAI,MAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,IAAI,GAAG,GAAG,QAAQ,CAAC;QACnB,IAAI,GAAG,GAAG,QAAQ,CAAC;QACnB,IAAI,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;QAC3B,IAAI,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;QAC3B,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnB,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnB,GAAE,CAAC;YACC,GAAG,IAAI,MAAM,CAAC;YACd,GAAG,IAAI,MAAM,CAAC;YACd,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnB,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC,QAAM,GAAG,IAAI,MAAM,IAAI,GAAG,IAAI,MAAM,EAAE;QACvC,MAAM,CAAC,EAAC,QAAQ,UAAA,EAAC,QAAQ,UAAA,EAAC,CAAC;IAC/B,CAAC;IAtJa,YAAG,GAAG,EAAE,CAAC,CAAI,MAAM;IACnB,YAAG,GAAG,EAAE,CAAC,CAAI,SAAS;IAEpC,cAAc;IACC,oBAAW,GAAG,IAAI,CAAC,CAAC,WAAW;IAC/B,mBAAU,GAAG,IAAI,CAAC,CAAC,aAAa;IAChC,iBAAQ,GAAG,GAAG,CAAC,CAAC,UAAU;IAC1B,oBAAW,GAAG,GAAG,CAAC,CAAA,WAAW;IAE7B,iBAAQ,GAAG,CAAC,CAAC;IACb,gBAAO,GAAG,CAAC,CAAC;IACZ,cAAK,GAAG,CAAC,CAAC;IA4I5B,eAAC;CAxJD,AAwJC,IAAA;kBAxJoB,QAAQ","file":"","sourceRoot":"../../../../../assets/Script/Util","sourcesContent":["/**\r\n * 测试\r\n */\r\n\r\n export default class WordUtil{\r\n    public static ROW = 12;    // row\r\n    public static COL = 12;    // colume\r\n\r\n    // Probability\r\n    private static verticalOdd = 0.35; // vertical\r\n    private static horizonOdd = 0.35; // horizontal\r\n    private static slopeOdd = 0.3; // oblique\r\n    private static oppositeOdd = 0.3;// opposite\r\n\r\n    private static vertical = 1;\r\n    private static horizon = 2;\r\n    private static slope = 3;\r\n\r\n    public static initWordGrid(wordLst : string[],addWordLst : string[]){\r\n        // Word length sorting\r\n        wordLst.sort((stringA, stringB)=>{\r\n            if(stringA.length == stringB.length){\r\n                return 0;\r\n            }\r\n            return stringA.length > stringB.length ? 1 : -1;\r\n        });\r\n        let wordGrid = {};\r\n        let insertLst = new Array();\r\n        let addInsertLst = new Array();\r\n        let addInfo = {};\r\n        for (let word of wordLst){\r\n            let info = this.insertWord(wordGrid,insertLst,addInsertLst,addInfo,word,false);\r\n            wordGrid = info.wordGrid;\r\n            insertLst = info.insertLst;\r\n            addInsertLst = info.addInsertLst;\r\n            addInfo = info.addInfo;\r\n        }\r\n        for (let word of addWordLst){\r\n            let info = this.insertWord(wordGrid,insertLst,addInsertLst,addInfo,word,true);\r\n            wordGrid = info.wordGrid;\r\n            insertLst = info.insertLst;\r\n            addInsertLst = info.addInsertLst;\r\n            addInfo = info.addInfo;\r\n        }\r\n        for(let row = 0; row < this.ROW; row++){\r\n            wordGrid[row] = wordGrid[row] || {};\r\n            for(let col = 0; col < this.COL; col++){\r\n                let k = wordGrid[row][col];\r\n                if (!k || k == \"\"){\r\n                    let key = Math.floor(Math.random() * 26);\r\n                    wordGrid[row][col] = String.fromCharCode(97 + key);\r\n                }\r\n            }\r\n        }\r\n        return {wordGrid,insertLst,addInsertLst,addInfo};\r\n    }\r\n\r\n    private static insertWord(wordGrid,insertLst,addInsertLst,addInfo,word:string,isAdd:boolean){\r\n        let index = 1;\r\n        do{\r\n            index++;\r\n            let type = this.getDirection();\r\n            let opposite = false;//Math.random() <= this.oppositeOdd; // check opposite or not\r\n            let minStartRow = opposite ? word.length: 0;\r\n            let minStartCol = opposite ? word.length: 0;\r\n            let maxStartRow = opposite ? this.ROW : Math.max(0,this.ROW - word.length);\r\n            let maxStartCol = opposite ? this.COL : Math.max(0,this.COL - word.length);\r\n            let startRow = -1;\r\n            let startCol = -1;\r\n            startRow = minStartRow + Math.floor(Math.random() * (maxStartRow - minStartRow));\r\n            startCol = minStartCol + Math.floor(Math.random() * (maxStartCol - minStartCol));\r\n            let intersection = this.getIntersection(wordGrid,word,startRow,startCol,type,opposite);\r\n            if (isAdd && intersection == 1){\r\n            }else if(!isAdd && intersection <= 0){\r\n            }else{\r\n                continue;\r\n            }\r\n            let row = startRow;\r\n            let col = startCol;\r\n            let intersectionRow = 0;\r\n            let intersectionCol = 0;\r\n            let rowAdd = type == this.vertical ? 0 : (opposite ? -1 : 1);\r\n            let colAdd = type == this.horizon ? 0 : (opposite ? -1 : 1);\r\n            if (type == this.slope){\r\n                rowAdd = opposite ? -1 : 1;\r\n                colAdd = opposite ? -1 : 1;\r\n            }\r\n            for (let k of word){\r\n                wordGrid[row] = wordGrid[row] || {};\r\n                if (!wordGrid[row][col] || wordGrid[row][col] == \"\"){\r\n                    wordGrid[row][col] = k;\r\n                }else{\r\n                    intersectionRow = row;\r\n                    intersectionCol = col;\r\n                    addInfo[word] = {row :intersectionRow, col : intersectionCol,letter : k};\r\n                }\r\n                row += rowAdd;\r\n                col += colAdd;\r\n            }\r\n            if (isAdd){\r\n                addInsertLst.push(word);\r\n            }else{\r\n                insertLst.push(word);\r\n            }\r\n            break;\r\n        }while(index < (isAdd ? 30 : 10));\r\n        return {wordGrid,insertLst,addInsertLst,addInfo};\r\n    }\r\n\r\n    private static getIntersection(wordGrid,word,startRow,startCol,type,opposite){\r\n        let intersection = 0;\r\n        let row = startRow;\r\n        let col = startCol;\r\n        let rowAdd = type == this.vertical ? 0 : (opposite ? -1 : 1);\r\n        let colAdd = type == this.horizon ? 0 : (opposite ? -1 : 1);\r\n        if (type == this.slope){\r\n            rowAdd = opposite ? -1 : 1;\r\n            colAdd = opposite ? -1 : 1;\r\n        }\r\n        for(let k of word){\r\n            if (wordGrid[row] && wordGrid[row][col] && wordGrid[row][col] != \"\"){\r\n                intersection++;\r\n            }\r\n            row += rowAdd;\r\n            col += colAdd;\r\n        }\r\n        return intersection;\r\n    }\r\n\r\n    private static getDirection(){\r\n        let odd = Math.random();\r\n        if (odd <= this.verticalOdd){\r\n            return this.vertical;\r\n        }else if(odd <= this.verticalOdd + this.horizonOdd){\r\n            return this.horizon;\r\n        }\r\n        return this.slope;\r\n    }\r\n\r\n    public static getWordRowColLst(startRow,startCol,endRow,endCol){\r\n        let addRow = endRow > startRow ? 1 :(endRow == startRow ? 0 : -1);\r\n        let addCol = endCol > startCol ? 1 :(endCol == startCol ? 0 : -1);\r\n        let row = startRow;\r\n        let col = startCol;\r\n        let rowArray = new Array();\r\n        let colArray = new Array();\r\n        rowArray.push(row);\r\n        colArray.push(col);\r\n        do{\r\n            row += addRow;\r\n            col += addCol;\r\n            rowArray.push(row);\r\n            colArray.push(col);\r\n        }while(row != endRow || col != endCol);\r\n        return {rowArray,colArray};\r\n    }\r\n }"]}