{"version":3,"sources":["../../../../../assets/Script/Model/assets/Script/Model/WordModel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Script/Model","sourcesContent":["import WordUtil from \"../Util/WordUtil\";\r\nimport EventUtil from \"../Util/EventUtil\";\r\nimport GameEvent from \"../Const/GameEvent\";\r\nimport Const from \"../Const/Const\";\r\nimport Util from \"../Util/Util\";\r\n\r\n/**\r\n * word model\r\n */\r\n\r\n export default class WordModel{\r\n     public static instance : WordModel = null;\r\n     public static DWordMap = {};\r\n     public static DDiffMap = {};\r\n    \r\n     private diff = \"1\";\r\n     private wordGrid = {};\r\n     private wordLst : Array<string> = null;\r\n     private wordComplete = {};\r\n     private addWordLst = null;\r\n     private addInfo = {};\r\n     \r\n     public static getInstance(){\r\n         if (!this.instance){\r\n             this.instance = new WordModel();\r\n         }\r\n         return this.instance;\r\n     }\r\n\r\n     public static destoryInstance(){\r\n        this.instance = null;\r\n     }\r\n\r\n     public setDiff(diff){\r\n         this.diff = diff;\r\n     }\r\n\r\n     public setWordGrid(wordGrid){\r\n        this.wordGrid = wordGrid;\r\n     }\r\n\r\n     public getWordGrid(){\r\n         return this.wordGrid;\r\n     }\r\n\r\n     public getWordLst(){\r\n         return this.wordLst;\r\n     }\r\n\r\n     public getLetter(row,col){\r\n        return this.wordGrid[row] && this.wordGrid[row][col] || \"\";\r\n     }\r\n\r\n     public static loadWord(rhand){\r\n        cc.loader.loadResArray([\"data/DDiff\",\"data/DWord\"],(err,assert)=>{\r\n            if (err){\r\n                console.log(\"Read array error,err = \" + err);\r\n                return;\r\n            }\r\n            for(let diff of assert[0]){\r\n                this.DDiffMap[diff.diff] = diff.name;\r\n                this.DWordMap[diff.diff] = {};\r\n                this.DWordMap[diff.diff][\"0\"] = new Array(); // Simple word\r\n                this.DWordMap[diff.diff][\"1\"] = new Array(); // Extra word\r\n            }\r\n            for (let word of assert[1]){\r\n                this.DWordMap[word.diff][word.isAdd].push(word);\r\n            }\r\n            if (rhand){\r\n                rhand();\r\n            }\r\n        });\r\n     }\r\n\r\n     private static initWord(diff){\r\n        if (!WordModel.DDiffMap[diff]){\r\n            diff = \"1\";\r\n        }\r\n        let wordMap = {};\r\n        wordMap = WordModel.DWordMap[diff];\r\n        console.log(wordMap);\r\n        let wordLst = [\"test\",\"word\",\"password\",\"baby\",\"lady\",\"nobody\"];\r\n        let addWordLst = [\"love\",\"world\",\"dispatch\"];\r\n        if (!wordMap){\r\n            return {wordLst,addWordLst};\r\n        }\r\n        wordLst = new Array();\r\n        addWordLst = new Array();\r\n        for (let index = 1; index <= Const.WORD_COUNT; index++){\r\n            if (wordMap[\"0\"].length <= 0){break;}\r\n            let i = Math.floor((Math.random() * wordMap[\"0\"].length));\r\n            wordLst.push(wordMap[\"0\"][i].word);\r\n            wordMap[\"0\"].splice(i,1);\r\n        }\r\n        for (let index = 1; index <= Const.ADD_WORD_COUNT; index++){\r\n            if (wordMap[\"1\"].length <= 0){break;}\r\n            let i = Math.floor((Math.random() * wordMap[\"1\"].length));\r\n            addWordLst.push(wordMap[\"1\"][i].word);\r\n            wordMap[\"1\"].splice(i,1);\r\n        }\r\n        WordModel.loadWord(null);\r\n        return {wordLst,addWordLst};\r\n     }\r\n\r\n     public init(){\r\n        this.wordComplete = {};\r\n        this.addInfo = {};\r\n        let data = WordModel.initWord(this.diff);\r\n        this.wordLst = data.wordLst;\r\n        this.addWordLst = data.addWordLst;\r\n        let info = WordUtil.initWordGrid(this.wordLst,this.addWordLst);\r\n        this.wordGrid = info.wordGrid;\r\n        this.wordLst = info.insertLst;\r\n        this.addWordLst = info.addInsertLst;\r\n        this.addInfo = info.addInfo;\r\n        for(let word of this.wordLst){\r\n            this.wordComplete[word] = false;\r\n        }\r\n     }\r\n\r\n     public resetCompleteArea(startRow,startCol,endRow,endCol){\r\n         console.log(\"endRow = \"+ endRow);\r\n         console.log(\"endCol = \" + endCol);\r\n        let addRow = endRow > startRow ? 1 :(endRow == startRow ? 0 : -1);\r\n        let addCol = endCol > startCol ? 1 :(endCol == startCol ? 0 : -1);\r\n        let row = startRow;\r\n        let col = startCol;\r\n        this.wordGrid[row][col] = this.findIntersectionLetter(row,col);\r\n        do{\r\n            row += addRow;\r\n            col += addCol;\r\n            this.wordGrid[row][col] = this.findIntersectionLetter(row,col);\r\n        }while(row != endRow || col != endCol)\r\n     }\r\n\r\n     private findIntersectionLetter(row,col){\r\n        for (let word in this.addInfo){\r\n            let data = this.addInfo[word];\r\n            if (this.wordComplete[word] != undefined){\r\n                continue;\r\n            }\r\n            if (data.row == row && data.col == col){\r\n                this.wordLst.push(word);\r\n                this.wordComplete[word] = false;\r\n                EventUtil.dispatchEvent(GameEvent.WORD_ADD_FIND,word);\r\n                EventUtil.dispatchEvent(GameEvent.WORD_COMPLETE);\r\n                return data.letter;\r\n            }\r\n        }\r\n        return this.getRandomLetter();\r\n     }\r\n\r\n     private getRandomLetter(){\r\n         let key = Math.floor(Math.random() * 26);\r\n         return String.fromCharCode(97 + key);\r\n     }\r\n\r\n     public getShowWord(startRow,startCol,endRow,endCol){\r\n        let array = WordUtil.getWordRowColLst(startRow,startCol,\r\n            endRow,endCol)\r\n        let rowArray = array.rowArray;\r\n        let colArray = array.colArray;\r\n        let str = \"\";\r\n        for (let i in rowArray){\r\n            let row = rowArray[i];\r\n            let col = colArray[i];\r\n            if (this.wordGrid[row] && this.wordGrid[row][col]){\r\n                str += this.wordGrid[row][col]\r\n            }\r\n        }\r\n        return str;\r\n     }\r\n\r\n     public checkComplete(str){\r\n        if (this.wordComplete[str] == false || this.wordComplete[str]){\r\n            this.wordComplete[str] = true;\r\n            EventUtil.dispatchEvent(GameEvent.WORD_COMPLETE);\r\n            return true;\r\n        }\r\n        return false;\r\n     }\r\n\r\n     public getCompleteCount(){\r\n         let count = 0;\r\n        for (let key in this.wordComplete){\r\n            if(this.wordComplete[key]){\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n     }\r\n\r\n     public getShowWordCount(){\r\n        let count = 0;\r\n        for (let key in this.wordComplete){\r\n            count++;\r\n        }\r\n        return count;\r\n     }\r\n\r\n     public getWordLstCount(){\r\n        let count = 0;\r\n        for (let key in this.wordLst){\r\n            count++;\r\n        }\r\n        return count;\r\n     }\r\n\r\n     public isComplete(word){\r\n        return this.wordComplete[word];\r\n     }\r\n\r\n     public getCompleteWord(){\r\n         return this.wordComplete;\r\n     }\r\n }"]}